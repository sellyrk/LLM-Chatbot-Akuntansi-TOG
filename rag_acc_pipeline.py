from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
import pandas as pd
import requests
import json

# Load CSV
df = pd.read_csv("transaksi.csv", sep=";")
df.columns = df.columns.str.strip()
df['Tanggal'] = pd.to_datetime(df['Tanggal'], dayfirst=True)
df['Jumlah'] = df['Jumlah'].astype(str).str.replace('_', '').str.replace('.', '').astype(int)
print("\n=== Preview df ===")
print(df.head())
print(df.dtypes)


# Buat "context string" dari setiap baris
contexts = []
for idx, row in df.iterrows():
    context = f"Tanggal: {row['Tanggal'].strftime('%d-%m-%Y')}, Jenis: {row['Jenis']}, Kategori: {row['Kategori']}, Jumlah: {row['Jumlah']}, Deskripsi: {row['Deskripsi']}"
    contexts.append(context)

# Buat embeddings
model = SentenceTransformer('all-MiniLM-L6-v2')
embeddings = model.encode(contexts, show_progress_bar=True)

# Buat index FAISS
dimension = embeddings.shape[1]
index = faiss.IndexFlatL2(dimension)
index.add(np.array(embeddings))

# Pertanyaan user
pertanyaan = input("Masukkan pertanyaan akuntansi: ")

# Buat embedding pertanyaan
query_embedding = model.encode([pertanyaan])

# Cari top-k context relevan
k = 5
D, I = index.search(np.array(query_embedding), k)

# Ambil context relevan
retrieved_contexts = [contexts[i] for i in I[0]]

# Gabungkan context menjadi 1 string
context_string = "\n".join(retrieved_contexts)

prompt = f"""
Kamu adalah asisten data accounting.

Berikut adalah beberapa data transaksi relevan:
{context_string}

File CSV memiliki kolom: Tanggal (datetime), Jenis (Pemasukan/Pengeluaran), Kategori, Jumlah (int), Deskripsi.
Buatkan DUA BARIS KODE PYTHON PANDAS untuk menjawab pertanyaan berikut dengan cara:
- Memfilter sesuai pertanyaan dan mengambil kolom ['Tanggal', 'Deskripsi', 'Jumlah'], lalu simpan ke variabel 'jawaban'.
- 
- Hitung total kolom 'Jumlah' dari 'jawaban' dan simpan ke variabel 'total'.

Pastikan:
- Tidak menggunakan `;` untuk memisahkan baris.
- Tidak menambahkan penjelasan apa pun, hanya kirim 2 baris kode Python valid.
- Menggunakan df yang sudah tersedia.

Pertanyaan: "{pertanyaan}"
"""

response = requests.post(
    'http://localhost:11434/api/generate',
    json={"model": "llama3", "prompt": prompt},
    stream=True
)

result = ""
for chunk in response.iter_lines():
    if chunk:
        try:
            data = json.loads(chunk.decode('utf-8'))
            if 'response' in data:
                result += data['response']
        except Exception:
            continue

result = result.strip().strip('`').replace('```python', '').replace('```', '').strip()

# Contoh auto-fix:
if ";" in result:
    result = result.replace(";", "\n")

result = result.strip('` \n')
if "```python" in result:
    result = result.replace("```python", "")
if "```" in result:
    result = result.replace("```", "")

# Auto-fix jika masih ada narasi
lines = result.splitlines()
code_lines = [line for line in lines if not line.strip().lower().startswith(('here', '```', '#', 'the'))]
result = "\n".join(code_lines)


print("\n=== Kode Generated by LLaMA ===")
print(result)
print(df.head())
print(df.dtypes)

exec_globals = {'df': df, 'pd': pd}
exec(result, exec_globals)
jawaban = exec_globals.get('jawaban')
total = exec_globals.get('total')

print(f"\n[DEBUG] jawaban type: {type(jawaban)}")
print(f"[DEBUG] jawaban empty: {jawaban.empty if hasattr(jawaban, 'empty') else 'N/A'}")
print(f"[DEBUG] jawaban preview:\n{jawaban.head() if hasattr(jawaban, 'head') else jawaban}")
print(f"[DEBUG] total: {total}")

if jawaban is not None and not jawaban.empty:
    # Tampilkan transaksi per baris
    print(f"\n‚úÖ Detail transaksi:")
    for idx, row in jawaban.iterrows():
        print(f"‚Ä¢ Rp{row['Jumlah']:,} ({row['Deskripsi']}) pada {row['Tanggal'].strftime('%d-%m-%Y')}")
    # Tampilkan total di bawah
    print(f"\n‚úÖ Total: Rp{total:,}\n")
    print("üìä Tabel transaksi:")
    print(jawaban.to_markdown(index=False))
else:
    print("\n‚ö†Ô∏è Tidak ada transaksi relevan dengan pertanyaan.")

